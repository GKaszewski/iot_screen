// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_SCREENIOT_H_
#define FLATBUFFERS_GENERATED_MESSAGE_SCREENIOT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace ScreenIoT {

struct Message;
struct MessageBuilder;

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_APP = 4,
    VT_PAYLOAD = 6
  };
  const ::flatbuffers::String *app() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APP);
  }
  const ::flatbuffers::String *payload() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PAYLOAD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_APP) &&
           verifier.VerifyString(app()) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyString(payload()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_app(::flatbuffers::Offset<::flatbuffers::String> app) {
    fbb_.AddOffset(Message::VT_APP, app);
  }
  void add_payload(::flatbuffers::Offset<::flatbuffers::String> payload) {
    fbb_.AddOffset(Message::VT_PAYLOAD, payload);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> app = 0,
    ::flatbuffers::Offset<::flatbuffers::String> payload = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_app(app);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Message> CreateMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *app = nullptr,
    const char *payload = nullptr) {
  auto app__ = app ? _fbb.CreateString(app) : 0;
  auto payload__ = payload ? _fbb.CreateString(payload) : 0;
  return ScreenIoT::CreateMessage(
      _fbb,
      app__,
      payload__);
}

inline const ScreenIoT::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<ScreenIoT::Message>(buf);
}

inline const ScreenIoT::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ScreenIoT::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ScreenIoT::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ScreenIoT::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ScreenIoT::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ScreenIoT::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ScreenIoT

#endif  // FLATBUFFERS_GENERATED_MESSAGE_SCREENIOT_H_
